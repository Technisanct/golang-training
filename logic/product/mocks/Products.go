// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	context "context"
	contract "golang-training/logic/product/contract"

	mock "github.com/stretchr/testify/mock"

	model "golang-training/repository/model"
)

// Products is an autogenerated mock type for the Products type
type Products struct {
	mock.Mock
}

// Create provides a mock function with given fields: c, request
func (_m *Products) Create(c context.Context, request *contract.CreateProductRequest) error {
	ret := _m.Called(c, request)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *contract.CreateProductRequest) error); ok {
		r0 = rf(c, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// List provides a mock function with given fields: c
func (_m *Products) List(c context.Context) ([]model.Product, error) {
	ret := _m.Called(c)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []model.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]model.Product, error)); ok {
		return rf(c)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []model.Product); ok {
		r0 = rf(c)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewProducts creates a new instance of Products. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProducts(t interface {
	mock.TestingT
	Cleanup(func())
}) *Products {
	mock := &Products{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
