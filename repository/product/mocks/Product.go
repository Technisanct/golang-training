// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	context "context"
	model "golang-training/repository/model"

	mock "github.com/stretchr/testify/mock"
)

// Product is an autogenerated mock type for the Product type
type Product struct {
	mock.Mock
}

// Create provides a mock function with given fields: c, doc
func (_m *Product) Create(c context.Context, doc *model.Product) error {
	ret := _m.Called(c, doc)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Product) error); ok {
		r0 = rf(c, doc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// List provides a mock function with given fields: c
func (_m *Product) List(c context.Context) ([]*model.Product, error) {
	ret := _m.Called(c)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []*model.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*model.Product, error)); ok {
		return rf(c)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*model.Product); ok {
		r0 = rf(c)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewProduct creates a new instance of Product. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProduct(t interface {
	mock.TestingT
	Cleanup(func())
}) *Product {
	mock := &Product{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
